apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: fortio
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/ingress.class: istio
  labels:
    release: {{ .Release.Name }}
spec:
  rules:
    - host: {{ .Release.Namespace }}-ingress.{{ .Values.domain }}
      http:
        paths:
          - path: /.*
            backend:
              serviceName: fortio
              servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: fortiomicro
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/ingress.class: istio-micro-ingress
  labels:
    release: {{ .Release.Name }}
spec:
  rules:
    - host: {{ .Release.Namespace }}-uingress.{{ .Values.domain }}
      http:
        paths:
          - path: /.*
            backend:
              serviceName: fortio
              servicePort: 8080

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: fortio
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  hosts:
    - {{ .Release.Namespace }}.{{ .Values.domain }}
  gateways:
    - istio-ingress/ingressgateway
    - istio-system/ingressgateway
    - istio-master/ingressgateway
  http:
    - route:
        - destination:
            host: fortio
            port:
              number: 8080
---

# Use MTLS from all workloads to Fortio. Explicit setting.
# Note that the k8s ingress uses Sidecar and doesn't import this namespace - so will not see this rule,
# and continue to use plain text
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: fortio
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  host:  fortio.{{ .Release.Namespace }}.svc.cluster.local
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
      #client_certificate: /etc/certs/cert-chain.pem
      #private_key: /etc/certs/key.pem
      #ca_certificates: /etc/certs/root-cert.pem
      #subject_alt_names:
      #- spiffe://cluster.local/ns/test/sa/default

---
# Authentication policy to enable permissive mode for all services (that have sidecar) in the mesh.
apiVersion: "authentication.istio.io/v1alpha1"
kind: MeshPolicy
metadata:
  name: "default"
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  peers:
  - mtls:
      mode: PERMISSIVE
---
apiVersion: v1
kind: Service
metadata:
  name: fortio
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  ports:
  - port: 8080
    name: http-echo
  - port: 8079
    name: grpc-ping
  selector:
    app: fortio

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: fortio
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/debug: "{{ .Values.debug }}"
        policy.istio.io/check: disable
        #sidecar.istio.io/discoveryAddress: "istio-pilot.{{ .Values.pilotns }}:15010"
      labels:
        app: fortio
        version: v1
    spec:
      containers:
      - name: fortio
        image: {{ .Values.fortioImage | default "costinm/fortio:latest" }}
        ports:
         - containerPort: 8080
         - containerPort: 8079
        args:
          - server
        resources:
          requests:
            cpu: 800m
            memory: "1G"
          limits:
            cpu: 1000m
            memory: "1G"

