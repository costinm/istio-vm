{{- /* Core defines the common configuration used by all webhook segments */}}
{{- define "core" }}
  {{- /* Kubernetes unfortunately requires a unique name for the webhook in some newer versions, so we assign
a unique prefix to each. */}}
- name: {{.Prefix}}sidecar-injector.istio.io
  clientConfig:
    {{- if .Values.injectionURL }}
    url: {{ .Values.injectionURL }}
    {{- else }}
    service:
      # This should be a user-managed service, selecting the
      # desired revision(s)
      name: istiod{{- if not (eq .Values.revision "") }}-{{ .Values.revision }}{{- end }}
      namespace: {{ .Release.Namespace }}
      # You can add /key/value options
      path: /inject{{ .Values.injectExtra }}
      port: 443
    {{- end }}
    {{- if .Values.caBundle }}
    caBundle: {{ .Values.caBundle }}
    {{- end }}
  sideEffects: None
  rules:
    - operations: [ "CREATE" ]
      apiGroups: [""]
      apiVersions: ["v1"]
      resources: ["pods"]
  failurePolicy: Fail
  admissionReviewVersions: ["v1beta1", "v1"]
  timeoutSeconds: 10
  matchPolicy: Equivalent
  reinvocationPolicy: Never
{{- end }}

apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  # Singleton - only for backward compatible or 'all namespaces'.
  # This is the same name that istioctl is using, so the object must be 'migrated'
  # first, see the README file.
  #
  # Any future 'default' (not revisioned) istioctl or helm install of the control plane must use
  # global.operatorManageWebhooks setting to prevent overriding the
  # user specified one.
  {{- if or .Values.enableIstioInjection .Values.enableNamespacesByDefault }}
  name: istio-sidecar-injector
  {{- else }}
  name: istio-revision-tag-{{ .Values.tag }}
  {{- end}}
  labels:
    # This label will be selected by the corresponding revision, for patching caBundle
    # If caBundle is specified explicitly, this should not be set.
    istio.io/rev: {{ .Values.revision }}
    istio.io/tag: {{ .Values.tag }}
webhooks:
{{- if .Values.enableNamespacesByDefault}}

{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "auto.") ) }}
  # This doesn't support excluding namespaces - but Istiod injector may configure an exclude list.
  namespaceSelector:
    matchExpressions:
      - key: istio-injection
        operator: DoesNotExist
      - key: istio.io/rev
        operator: DoesNotExist
      # This is a new tag added in this chart.
      - key: istio.io/tag
        operator: DoesNotExist
  objectSelector:
    matchExpressions:
      - key: sidecar.istio.io/inject
        operator: DoesNotExist
      - key: istio.io/rev
        operator: DoesNotExist

{{- else if .Values.enableIstioInjection }}

    # Default/legacy injection, compat mode
{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "namespace.") ) }}
  namespaceSelector:
    matchExpressions:
    - key: istio-injection
      operator: In
      values:
      - enabled
  objectSelector:
    matchExpressions:
    - key: sidecar.istio.io/inject
      operator: NotIn
      values:
      - "false"

{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "object.") ) }}
  # If namespace has either selector, it will be used. istio.io/rev can't override
  namespaceSelector:
    matchExpressions:
      - key: istio.io/rev
        operator: DoesNotExist
      - key: istio-injection
        operator: DoesNotExist
  objectSelector:
    matchExpressions:
      - key: sidecar.istio.io/inject
        operator: In
        values:
          - "true"
      - key: istio.io/rev
        operator: DoesNotExist

{{ else }}

{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "rev.namespace.") ) }}
  # Selection of objects
  # If istio-injection is specified - it will take precendence
  # If istio.io/rev is selected, will be used, pods can only opt out.
  namespaceSelector:
    matchExpressions:
    - key: istio.io/rev
      operator: In
      values:
        - {{ .Values.tag }}
    # Legacy injector wins, for backward compat
    - key: istio-injection
      operator: DoesNotExist
  objectSelector:
    matchExpressions:
    - key: sidecar.istio.io/inject
      operator: NotIn
      values:
      - "false"

{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "tag.namespace.") ) }}
  # If istio-injection is specified - it will take precendence
  # If istio.io/rev is selected, will be used, pods can only opt out.
  #
  # istio.io/tag on namespace is lower priority than istio.io/rev tag on pods
  namespaceSelector:
    matchExpressions:
    - key: istio.io/tag
      operator: In
      values:
        - {{ .Values.tag }}
    # Rev or Legacy injector wins, for backward compat
    - key: istio.io/rev
      operator: DoesNotExist
    - key: istio-injection
      operator: DoesNotExist
  objectSelector:
    matchExpressions:
    - key: sidecar.istio.io/inject
      operator: NotIn
      values:
      - "false"
      - disabled
    - key: istio.io/rev
      operator: DoesNotExist

{{- include "core" (mergeOverwrite (deepCopy .) (dict "Prefix" "rev.object.") ) }}
  # If namespace has either selector, it will be used. istio.io/rev can't override
  namespaceSelector:
    matchExpressions:
      - key: istio.io/rev
        operator: DoesNotExist
      - key: istio-injection
        operator: DoesNotExist
  objectSelector:
    matchExpressions:
      - key: sidecar.istio.io/inject
        operator: NotIn
        values:
          - "false"
          - disabled
      - key: istio.io/rev
        operator: In
        values:
          - {{ .Values.tag }}

{{- end }}

