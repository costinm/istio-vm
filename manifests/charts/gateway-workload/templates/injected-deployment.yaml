{{/* This provides a minimal gateway, ready to be injected.
     Any settings from values should be here - these are options specific to the gateway.
     Global settings, like the image, various env vars and volumes, etc will be injected.
     The normal Deployment is not suitable for this, as the original pod spec will override the injection template. */}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
{{- if .Values.labels }}
{{ .Values.labels | toYaml | indent 4 }}
{{- end }}
{{- if .Values.revision }}
    istio.io/rev: {{ .Values.revision }}
{{- else }}
    sidecar.istio.io/inject: "true"
{{- end }}
spec:
{{- if not .Values.autoscaleEnabled }}
{{- if .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
{{- end }}
  selector:
    matchLabels:
      {{- if eq .Release.Namespace "istio-system" }}
      app: istio-ingressgateway
      istio: ingressgateway
      {{- else }}
      {{/*      # Recommended K8S labels*/}}
      app.kubernetes.io/name: istio-gateway
      app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingMaxSurge }}
      maxUnavailable: {{ .Values.rollingMaxUnavailable }}
  template:
    metadata:
      labels:
        # Selected by service
        {{- if eq .Release.Namespace "istio-system"}}
        istio: ingressgateway
        app: istio-ingressgateway
        release: istio
        {{- else }}
        istio: {{ .Release.Namespace}}
        {{- end }}
        app.kubernetes.io/name: istio-gateway
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Values.label | default "latest" }}
{{- if .Values.labels }}
{{ .Values.labels | toYaml | indent 8 }}
{{- end }}
        sidecar.istio.io/inject: "true"
        {{- if .Values.revision }}
        istio.io/rev: {{ .Values.revision }}
        {{- end }}
      annotations:
        {{- if .Values.enablePrometheusMerge }}
        prometheus.io/port: "15020"
        prometheus.io/scrape: "true"
        prometheus.io/path: "/stats/prometheus"
        {{- end }}
        sidecar.istio.io/inject: "true"
        inject.istio.io/templates: "{{ .Values.injectionTemplate }}"
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if not .Values.runAsRoot }}
      securityContext:
        runAsUser: 1337
        runAsGroup: 1337
        runAsNonRoot: true
        fsGroup: 1337
{{- end }}
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- else if .Values.imagePullSecrets }}
      serviceAccountName: {{ .Release.Name }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
{{- end }}
      containers:
        - name: istio-proxy
{{- if .Values.image }}
          image: {{ .Values.image }}
{{- else }}
          image: {{ .Values.hub}}{{ .Values.image }}{{ .Values.tag }}
{{- end }}
{{- if .Values.imagePullPolicy }}
          image: {{ .Values.imagePullPolicy }}
{{- end }}
          ports:
            {{- range $key, $val := .Values.ports }}
            - containerPort: {{ $val.targetPort | default $val.port }}
              protocol: {{ $val.protocol | default "TCP" }}
            {{- end }}
            - containerPort: 15090
              protocol: TCP
              name: http-envoy-prom
        {{- if not .Values.runAsRoot }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
        {{- end }}
          resources:
{{- if .Values.resources }}
{{ toYaml .Values.resources | indent 12 }}
{{- end }}
          env:
          {{- if not .Values.runAsRoot }}
          - name: ISTIO_META_UNPRIVILEGED_POD
            value: "true"
          {{- end }}
          {{- if .Values.routerMode }}
          - name: ISTIO_META_ROUTER_MODE
            value: {{ .Values.routerMode }}
          {{- end }}
          {{- range $key, $val := .Values.env }}
          - name: {{ $key }}
            value: {{ $val }}
          {{- end }}
          # VolumeMounts will be injected
{{/*          volumeMounts:*/}}
{{/*          {{- range .Values.secretVolumes }}*/}}
{{/*          - name: {{ .name }}*/}}
{{/*            mountPath: {{ .mountPath | quote }}*/}}
{{/*            readOnly: true*/}}
{{/*          {{- end }}*/}}
{{/*          {{- range .Values.configVolumes }}*/}}
{{/*          {{- if .mountPath }}*/}}
{{/*          - name: {{ .name }}*/}}
{{/*            mountPath: {{ .mountPath | quote }}*/}}
{{/*            readOnly: true*/}}
{{/*          {{- end }}*/}}
{{/*          {{- end }}*/}}
      # Volumes will be injected
      #volumes:

{{/*      affinity:*/}}
{{/*      {{ include "nodeaffinity" .Values.nodeSelector | trim | indent 8 }}*/}}
{{/*      {{- include "podAntiAffinity" .Values | indent 6 }}*/}}

{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 6 }}
{{- end }}
